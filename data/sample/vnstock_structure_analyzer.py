import vnstock
import inspect
import json
from pprint import pprint

def analyze_module(module):
    """Ph√¢n t√≠ch c·∫•u tr√∫c c·ªßa module"""
    structure = {
        'functions': [],
        'classes': [],
        'variables': []
    }
    
    # L·∫•y t·∫•t c·∫£ c√°c thu·ªôc t√≠nh c·ªßa module
    for name, obj in inspect.getmembers(module):
        # B·ªè qua c√°c thu·ªôc t√≠nh private v√† special
        if name.startswith('_'):
            continue
            
        # Ph√¢n lo·∫°i c√°c ƒë·ªëi t∆∞·ª£ng
        if inspect.isfunction(obj):
            func_info = {
                'name': name,
                'doc': inspect.getdoc(obj),
                'signature': str(inspect.signature(obj))
            }
            structure['functions'].append(func_info)
            
        elif inspect.isclass(obj):
            class_info = {
                'name': name,
                'doc': inspect.getdoc(obj),
                'methods': []
            }
            # L·∫•y c√°c method c·ªßa class
            for method_name, method_obj in inspect.getmembers(obj, predicate=inspect.isfunction):
                if not method_name.startswith('_'):
                    method_info = {
                        'name': method_name,
                        'doc': inspect.getdoc(method_obj),
                        'signature': str(inspect.signature(method_obj))
                    }
                    class_info['methods'].append(method_info)
            structure['classes'].append(class_info)
            
        else:
            # C√°c bi·∫øn v√† h·∫±ng s·ªë
            structure['variables'].append({
                'name': name,
                'type': str(type(obj))
            })
    
    return structure

def print_structure(structure):
    """In c·∫•u tr√∫c ph√¢n t√≠ch ƒë∆∞·ª£c theo ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc"""
    print("\n=== FUNCTIONS ===")
    for func in structure['functions']:
        print(f"\nüìå {func['name']}{func['signature']}")
        if func['doc']:
            print(f"   üìù {func['doc']}")
            
    print("\n=== CLASSES ===")
    for class_ in structure['classes']:
        print(f"\nüî∑ {class_['name']}")
        if class_['doc']:
            print(f"   üìù {class_['doc']}")
        print("   Methods:")
        for method in class_['methods']:
            print(f"   ‚îú‚îÄ {method['name']}{method['signature']}")
            if method['doc']:
                print(f"   ‚îÇ  üìù {method['doc']}")
                
    print("\n=== VARIABLES ===")
    for var in structure['variables']:
        print(f"‚Ä¢ {var['name']}: {var['type']}")

def main():
    print("üîç Analyzing vnstock library structure...")
    structure = analyze_module(vnstock)
    
    print("\nüìä VNSTOCK LIBRARY STRUCTURE")
    print("=" * 50)
    print_structure(structure)
    
    # L∆∞u k·∫øt qu·∫£ v√†o file JSON ƒë·ªÉ tham kh·∫£o sau
    with open('vnstock_structure.json', 'w', encoding='utf-8') as f:
        json.dump(structure, f, indent=2, ensure_ascii=False)
    print("\n‚úÖ Analysis complete! Results saved to vnstock_structure.json")

if __name__ == "__main__":
    main() 