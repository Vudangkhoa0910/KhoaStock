from vnstock import Listing, Quote, Company, Finance, Trading
import pandas as pd
import logging
from datetime import datetime, timedelta
import time
import random
from functools import wraps

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    filename='vnstock_explorer.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# T·∫Øt c·∫£nh b√°o pandas
pd.options.mode.chained_assignment = None
pd.set_option('future.no_silent_downcasting', True)

def handle_rate_limit(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            result = func(*args, **kwargs)
            # Random delay between 3-7 seconds after successful call
            delay = random.uniform(3, 7)
            time.sleep(delay)
            return result
        except NotImplementedError as e:
            print(f"‚ùå Ch·ª©c nƒÉng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {str(e)}")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói khi kh√°m ph√° {func.__name__}: {str(e)}")
            # Longer delay (15-45s) after error
            delay = random.uniform(15, 45)
            time.sleep(delay)
            return None
    return wrapper

class VnstockExplorer:
    def __init__(self, symbol='VCB', source='VCI'):
        """Kh·ªüi t·∫°o explorer v·ªõi m·ªôt m√£ ch·ª©ng kho√°n v√† ngu·ªìn d·ªØ li·ªáu
        
        Args:
            symbol (str): M√£ ch·ª©ng kho√°n (m·∫∑c ƒë·ªãnh: 'VCB')
            source (str): Ngu·ªìn d·ªØ li·ªáu ('VCI', 'TCBS', 'MSN') (m·∫∑c ƒë·ªãnh: 'VCI')
        """
        self.symbol = symbol
        self.source = source
        self.listing = Listing(source='VCI')  # Listing ch·ªâ h·ªó tr·ª£ VCI ho·∫∑c MSN
        self.quote = Quote(symbol=symbol, source=source)
        self.company = Company(symbol=symbol, source=source)
        self.finance = Finance(symbol=symbol, source=source)

    @handle_rate_limit
    def explore_listing(self):
        """Kh√°m ph√° c√°c ch·ª©c nƒÉng li·ªát k√™ danh s√°ch"""
        print("\nüîç KH√ÅM PH√Å CH·ª®C NƒÇNG LISTING\n")
        
        print("1. Danh s√°ch t·∫•t c·∫£ m√£ ch·ª©ng kho√°n:")
        all_symbols = self.listing.all_symbols()
        print(all_symbols.head() if isinstance(all_symbols, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        print("\n2. Danh s√°ch ng√†nh:")
        industries = self.listing.industries_icb()
        print(industries.head() if isinstance(industries, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        print("\n3. Danh s√°ch m√£ theo s√†n:")
        by_exchange = self.listing.symbols_by_exchange()
        print(by_exchange.head() if isinstance(by_exchange, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")

    @handle_rate_limit
    def explore_company_info(self):
        """Kh√°m ph√° th√¥ng tin c√¥ng ty"""
        print("\nüè¢ KH√ÅM PH√Å TH√îNG TIN C√îNG TY\n")
        
        print("1. Th√¥ng tin t·ªïng quan c√¥ng ty:")
        overview = self.company.overview()
        print(overview if isinstance(overview, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        print("\n2. Danh s√°ch c·ªï ƒë√¥ng l·ªõn:")
        shareholders = self.company.shareholders()
        print(shareholders.head() if isinstance(shareholders, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")

    @handle_rate_limit
    def explore_financial_info(self):
        """Kh√°m ph√° th√¥ng tin t√†i ch√≠nh"""
        print("\nüí∞ KH√ÅM PH√Å TH√îNG TIN T√ÄI CH√çNH\n")
        
        print("1. Ch·ªâ s·ªë t√†i ch√≠nh:")
        ratios = self.finance.ratio()
        print(ratios.head() if isinstance(ratios, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        print("\n2. B√°o c√°o t√†i ch√≠nh:")
        income = self.finance.income_statement()
        print(income.head() if isinstance(income, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        print("\n3. B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n:")
        balance = self.finance.balance_sheet()
        print(balance.head() if isinstance(balance, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        print("\n4. B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá:")
        cashflow = self.finance.cash_flow()
        print(cashflow.head() if isinstance(cashflow, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")

    @handle_rate_limit
    def explore_trading_data(self):
        """Kh√°m ph√° d·ªØ li·ªáu giao d·ªãch"""
        print("\nüìà KH√ÅM PH√Å D·ªÆ LI·ªÜU GIAO D·ªäCH\n")
        
        print("1. D·ªØ li·ªáu l·ªãch s·ª≠:")
        try:
            history = self.quote.history(start="2023-01-01", end="2024-03-31")
            print(history.head() if isinstance(history, pd.DataFrame) else "Kh√¥ng c√≥ d·ªØ li·ªáu")
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠: {str(e)}")

    def explore_all(self):
        """Kh√°m ph√° t·∫•t c·∫£ ch·ª©c nƒÉng"""
        print("=" * 50)
        print(f"Testing with {self.symbol} (Source: {self.source})")
        print("=" * 50)
        
        print(f"\nüöÄ B·∫ÆT ƒê·∫¶U KH√ÅM PH√Å VNSTOCK")
        print(f"M√£ ch·ª©ng kho√°n: {self.symbol}")
        
        self.explore_listing()
        time.sleep(15)  # Delay between major sections
        
        self.explore_company_info()
        time.sleep(15)
        
        self.explore_financial_info()
        time.sleep(15)
        
        self.explore_trading_data()

def main():
    # Test v·ªõi m·ªôt s·ªë m√£ ph·ªï bi·∫øn
    symbols = ['VCB', 'VNM', 'FPT']
    for symbol in symbols:
        explorer = VnstockExplorer(symbol)  # S·ª≠ d·ª•ng VCI l√†m ngu·ªìn m·∫∑c ƒë·ªãnh
        explorer.explore_all()
        time.sleep(45)  # Delay between stocks

if __name__ == "__main__":
    main() 