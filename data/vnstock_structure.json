{
  "functions": [],
  "classes": [
    {
      "name": "Company",
      "doc": "Base adapter that dynamically discovers the correct explorer subpackage,\nimports the provider's module, and instantiates its class with only\nthe acceptable constructor parameters.",
      "methods": [
        {
          "name": "affiliate",
          "doc": "Retrieve company affiliate data.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "events",
          "doc": "Retrieve company events.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "history",
          "doc": null,
          "signature": "(self, *args, **kwargs)"
        },
        {
          "name": "news",
          "doc": "Retrieve company news.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "officers",
          "doc": "Retrieve company officers data.\nSupports kwargs like filter_by='working'|'resigned'|'all'.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "overview",
          "doc": "Retrieve company overview data.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "shareholders",
          "doc": "Retrieve company shareholders data.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "subsidiaries",
          "doc": "Retrieve company subsidiaries data.\nSupports kwargs like filter_by='all'|'subsidiary'.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        }
      ]
    },
    {
      "name": "Finance",
      "doc": "Base adapter that dynamically discovers the correct explorer subpackage,\nimports the provider's module, and instantiates its class with only\nthe acceptable constructor parameters.",
      "methods": [
        {
          "name": "balance_sheet",
          "doc": "Retrieve balance sheet data.\nForwards supported kwargs (e.g., period, lang, dropna, show_log).",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "cash_flow",
          "doc": "Retrieve cash flow statement data.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "history",
          "doc": null,
          "signature": "(self, *args, **kwargs)"
        },
        {
          "name": "income_statement",
          "doc": "Retrieve income statement data.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "ratio",
          "doc": "Retrieve financial ratios.\nSupports provider kwargs like flatten_columns, separator, drop_levels, etc.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        }
      ]
    },
    {
      "name": "Fund",
      "doc": null,
      "methods": [
        {
          "name": "asset_holding",
          "doc": "Retrieve list of assets holding allocation for specific fundID. Live data is retrieved from the Fmarket API.\n\nParameters\n----------\n    fundId : int\n        id of a fund in fmarket database.\n\nReturns\n-------\n    df : pd.DataFrame\n        DataFrame of assets holding allocation of the selected fund.",
          "signature": "(self, fundId: int = 23) -> pandas.core.frame.DataFrame"
        },
        {
          "name": "filter",
          "doc": "Truy xuất danh sách quỹ theo tên viết tắt (short_name) và mã id của quỹ. Mặc định là rỗng để liệt kê tất cả các quỹ.\n\nTham số:\n----------\n    symbol (str): Tên viết tắt của quỹ cần tìm kiếm. Mặc định là rỗng để lấy tất cả các quỹ.\n\nTrả về:\n-------\n    pd.DataFrame: DataFrame chứa thông tin của quỹ cần tìm kiếm.",
          "signature": "(self, symbol: str = '') -> pandas.core.frame.DataFrame"
        },
        {
          "name": "industry_holding",
          "doc": "Retrieve list of industries and fund distribution for specific fundID. Live data is retrieved from the Fmarket API.\n\nParameters\n----------\n    fundId : int\n        id of a fund in fmarket database\n\nReturns\n-------\n    df : pd.DataFrame\n        DataFrame of the current top industries in the selected fund.",
          "signature": "(self, fundId: int = 23) -> pandas.core.frame.DataFrame"
        },
        {
          "name": "listing",
          "doc": "Truy xuất danh sách tất cả các quỹ mở hiện có trên Fmarket thông qua API. Xem trực tiếp tại https://fmarket.vn\n\nTham số:\n----------\n    fund_type (str): Loại quỹ cần lọc. Mặc định là rỗng để lấy tất cả các quỹ. Các loại quỹ hợp lệ bao gồm: 'BALANCED', 'BOND', 'STOCK'\n\nTrả về:\n-------\n    pd.DataFrame: DataFrame chứa thông tin của tất cả các quỹ mở hiện có trên Fmarket. ",
          "signature": "(self, fund_type: str = '') -> pandas.core.frame.DataFrame"
        },
        {
          "name": "nav_report",
          "doc": "Retrieve all available daily NAV data point of the specified fund. Live data is retrieved from the Fmarket API.\n\nParameters\n----------\n    fundId : int\n        id of a fund in fmarket database.\n\nReturns\n-------\n    df : pd.DataFrame\n        DataFrame of all avalaible daily NAV data points of the selected fund.",
          "signature": "(self, fundId: int = 23) -> pandas.core.frame.DataFrame"
        },
        {
          "name": "top_holding",
          "doc": "Retrieve list of top 10 holdings in the specified fund. Live data is retrieved from the Fmarket API.\n\nParameters\n----------\n    fundId : int\n        id of a fund in fmarket database\nReturns\n-------\n    df : pd.DataFrame\n        DataFrame of the current top 10 holdings of the selected fund.",
          "signature": "(self, fundId: int = 23) -> pandas.core.frame.DataFrame"
        }
      ]
    },
    {
      "name": "Listing",
      "doc": "Base adapter that dynamically discovers the correct explorer subpackage,\nimports the provider's module, and instantiates its class with only\nthe acceptable constructor parameters.",
      "methods": [
        {
          "name": "all_bonds",
          "doc": "Retrieve all bonds (group='BOND').",
          "signature": "(self, **kwargs: Any) -> Any"
        },
        {
          "name": "all_covered_warrant",
          "doc": "Retrieve all covered warrants (group='CW').",
          "signature": "(self, **kwargs: Any) -> Any"
        },
        {
          "name": "all_future_indices",
          "doc": "Retrieve all futures indices (group='FU_INDEX').",
          "signature": "(self, **kwargs: Any) -> Any"
        },
        {
          "name": "all_government_bonds",
          "doc": "Retrieve all government bonds (group='FU_BOND').",
          "signature": "(self, **kwargs: Any) -> Any"
        },
        {
          "name": "all_symbols",
          "doc": "Retrieve all symbols (filtered to STOCK).",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "history",
          "doc": null,
          "signature": "(self, *args, **kwargs)"
        },
        {
          "name": "industries_icb",
          "doc": "Retrieve ICB code hierarchy and mapping.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "symbols_by_exchange",
          "doc": "Retrieve symbols by exchange/board.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "symbols_by_group",
          "doc": "Retrieve symbols by predefined group (VN30, HNX30, CW, etc.).",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "symbols_by_industries",
          "doc": "Retrieve symbols grouped by ICB industries.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        }
      ]
    },
    {
      "name": "Quote",
      "doc": "Base adapter that dynamically discovers the correct explorer subpackage,\nimports the provider's module, and instantiates its class with only\nthe acceptable constructor parameters.",
      "methods": [
        {
          "name": "history",
          "doc": "Load historical OHLC data for the symbol.\n\nForwards only supported kwargs to provider.history().",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "intraday",
          "doc": "Load intraday trade data for the symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "price_depth",
          "doc": "Load price depth (order book) data for the symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        }
      ]
    },
    {
      "name": "Screener",
      "doc": "API adapter for the TCBS stock screener.\nSupports only the 'tcbs' data source.",
      "methods": [
        {
          "name": "stock",
          "doc": "Run a stock screen with given filters.\n\nArgs:\n    params: Filter parameters, e.g. {\"exchangeName\": \"HOSE,HNX,UPCOM\"}.\n    limit: Number of results to return.\n    id: Optional screener ID.\n    lang: Language code for multi-language fields ('vi' or 'en').\n\nReturns:\n    pd.DataFrame: Screened stock data.",
          "signature": "(self, params: dict = None, limit: int = 50, id: str = None, lang: str = 'vi') -> pandas.core.frame.DataFrame"
        }
      ]
    },
    {
      "name": "Trading",
      "doc": "Base adapter that dynamically discovers the correct explorer subpackage,\nimports the provider's module, and instantiates its class with only\nthe acceptable constructor parameters.",
      "methods": [
        {
          "name": "foreign_trade",
          "doc": "Retrieve foreign trade data for the given symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "history",
          "doc": null,
          "signature": "(self, *args, **kwargs)"
        },
        {
          "name": "insider_deal",
          "doc": "Retrieve insider deal data for the given symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "order_stats",
          "doc": "Retrieve order statistics for the given symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "price_board",
          "doc": "Retrieve the price board (order book) for a list of symbols.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "price_history",
          "doc": "Retrieve the price history for a list of symbols.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "prop_trade",
          "doc": "Retrieve property trade data for the given symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "side_stats",
          "doc": "Retrieve bid/ask side statistics for the given symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        },
        {
          "name": "trading_stats",
          "doc": "Retrieve trading statistics for the given symbol.",
          "signature": "(self, *args: Any, **kwargs: Any) -> Any"
        }
      ]
    },
    {
      "name": "Vnstock",
      "doc": "Class (lớp) chính quản lý các chức năng của thư viện Vnstock.",
      "methods": [
        {
          "name": "crypto",
          "doc": null,
          "signature": "(self, symbol: Optional[str] = 'BTC', source: Optional[str] = 'MSN')"
        },
        {
          "name": "fund",
          "doc": null,
          "signature": "(self, source: Optional[str] = 'FMARKET')"
        },
        {
          "name": "fx",
          "doc": null,
          "signature": "(self, symbol: Optional[str] = 'EURUSD', source: Optional[str] = 'MSN')"
        },
        {
          "name": "stock",
          "doc": null,
          "signature": "(self, symbol: Optional[str] = None, source: Optional[str] = None)"
        },
        {
          "name": "world_index",
          "doc": null,
          "signature": "(self, symbol: Optional[str] = 'DJI', source: Optional[str] = 'MSN')"
        }
      ]
    }
  ],
  "variables": [
    {
      "name": "api",
      "type": "<class 'module'>"
    },
    {
      "name": "base",
      "type": "<class 'module'>"
    },
    {
      "name": "chart_wrapper",
      "type": "<class 'module'>"
    },
    {
      "name": "common",
      "type": "<class 'module'>"
    },
    {
      "name": "config",
      "type": "<class 'module'>"
    },
    {
      "name": "core",
      "type": "<class 'module'>"
    },
    {
      "name": "explorer",
      "type": "<class 'module'>"
    },
    {
      "name": "vnai",
      "type": "<class 'module'>"
    }
  ]
}