import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
from datetime import datetime, timedelta
import os
from pathlib import Path
from PIL import Image

st.set_page_config(
    page_title="Ph√¢n T√≠ch Ch·ª©ng Kho√°n",
    page_icon="üìà",
    layout="wide"
)

ROOT_DIR = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
COLLECTED_DATA_DIR = ROOT_DIR / "data" / "collected_data"

st.markdown("""
<style>
    .main {
        padding: 0rem 1rem;
    }
    .stProgress > div > div > div > div {
        background-color: #1c4b27;
    }
    .stAlert > div {
        padding: 0.5rem 1rem;
        margin-bottom: 0.5rem;
    }
    div[data-testid="stSidebarNav"] {
        background-image: linear-gradient(#2e7d32,#1b5e20);
        color: white;
        padding: 1rem;
    }
    div[data-testid="stSidebarNav"] > ul {
        padding-left: 1.5rem;
    }
    .stock-metrics {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .pipeline-step {
        border-left: 3px solid #2e7d32;
        padding-left: 1rem;
        margin: 1rem 0;
    }
    .market-data {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 0.5rem 0;
    }
    .price-up {
        color: #2e7d32;
        font-weight: bold;
    }
    .price-down {
        color: #c62828;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

def load_market_data():
    """T·∫£i d·ªØ li·ªáu th·ªã tr∆∞·ªùng t·ª´ file CSV m·ªõi nh·∫•t"""
    market_data_dir = COLLECTED_DATA_DIR / "market_data"
    market_files = list(market_data_dir.glob("price_board_*.csv"))
    if not market_files:
        return None
    
    latest_file = max(market_files, key=lambda x: x.stat().st_mtime)
    # ƒê·ªçc file v·ªõi header=0 ƒë·ªÉ l·∫•y d√≤ng ƒë·∫ßu ti√™n l√†m t√™n c·ªôt
    df = pd.read_csv(latest_file, header=[0, 1])
    
    # T·∫°o DataFrame m·ªõi v·ªõi c√°c c·ªôt c·∫ßn thi·∫øt
    market_data = pd.DataFrame()
    market_data['symbol'] = df[('listing', 'symbol')]
    market_data['ceiling'] = df[('listing', 'ceiling')].astype(float)
    market_data['floor'] = df[('listing', 'floor')].astype(float)
    market_data['ref_price'] = df[('listing', 'ref_price')].astype(float)
    
    # Th√™m c√°c c·ªôt t·ª´ nh√≥m match
    market_data['match_price'] = df[('match', 'match_price')].astype(float)
    market_data['accumulated_volume'] = df[('match', 'accumulated_volume')].astype(float)
    market_data['highest'] = df[('match', 'highest')].astype(float)
    market_data['lowest'] = df[('match', 'lowest')].astype(float)
    
    # Th√™m th√¥ng tin kh·ªëi ngo·∫°i
    market_data['foreign_room'] = df[('match', 'current_room')].astype(float)
    market_data['total_room'] = df[('match', 'total_room')].astype(float)
    market_data['current_holding_ratio'] = (market_data['total_room'] - market_data['foreign_room']) / market_data['total_room']
    
    # T√≠nh KLGD trung b√¨nh 2 tu·∫ßn (gi·∫£ l·∫≠p)
    market_data['avg_match_volume_2w'] = market_data['accumulated_volume'] * 0.8  # Gi·∫£ l·∫≠p d·ªØ li·ªáu
    
    return market_data

def load_trading_stats(symbol):
    """T·∫£i th·ªëng k√™ giao d·ªãch cho m√£ ch·ª©ng kho√°n"""
    stats_dir = COLLECTED_DATA_DIR / "trading_stats"
    stats_files = list(stats_dir.glob(f"{symbol}_trading_stats_*.csv"))
    if not stats_files:
        return None
    
    latest_file = max(stats_files, key=lambda x: x.stat().st_mtime)
    df = pd.read_csv(latest_file)
    return df

def load_technical_data(symbol):
    """T·∫£i d·ªØ li·ªáu ch·ªâ b√°o k·ªπ thu·∫≠t cho m√£ ch·ª©ng kho√°n"""
    tech_file = COLLECTED_DATA_DIR / "technical" / f"{symbol}_technical.csv"
    if not tech_file.exists():
        return None
    
    df = pd.read_csv(tech_file)
    df['time'] = pd.to_datetime(df['time'])
    return df

def format_price(price, ref_price=None):
    """ƒê·ªãnh d·∫°ng gi√° v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng"""
    if ref_price is None:
        return f"{price:,.0f}"
    
    color = "price-up" if price > ref_price else "price-down" if price < ref_price else ""
    return f'<span class="{color}">{price:,.0f}</span>'

# Thanh b√™n
st.sidebar.title("Quy Tr√¨nh Ph√¢n T√≠ch Ch·ª©ng Kho√°n by Vu Dang Khoa")
st.sidebar.markdown("---")

# Ch·ªçn m√£ ch·ª©ng kho√°n
STOCK_CODES = ["VCB", "VNM", "FPT"]
selected_stock = st.sidebar.selectbox("Ch·ªçn M√£ Ch·ª©ng Kho√°n", STOCK_CODES)

# Ch·ªçn kho·∫£ng th·ªùi gian
date_range = st.sidebar.date_input(
    "Ch·ªçn Kho·∫£ng Th·ªùi Gian",
    value=(datetime.now() - timedelta(days=365), datetime.now()),
    max_value=datetime.now()
)

# Ti·∫øn ƒë·ªô quy tr√¨nh
pipeline_stages = {
    "Thu Th·∫≠p D·ªØ Li·ªáu": ["D·ªØ Li·ªáu Th·ªã Tr∆∞·ªùng", "Th·ªëng K√™ Giao D·ªãch", "Tin T·ª©c", "C∆° B·∫£n"],
    "X·ª≠ L√Ω D·ªØ Li·ªáu": ["Ch·ªâ B√°o K·ªπ Thu·∫≠t", "Ph√¢n T√≠ch Kh·ªëi L∆∞·ª£ng", "Nh·∫≠n Di·ªán M·∫´u H√¨nh"],
    "Ph√¢n T√≠ch D·ªØ Li·ªáu": ["Ph√¢n T√≠ch Gi√°", "T·∫°o T√≠n Hi·ªáu", "D·ª± ƒêo√°n M√¥ H√¨nh"]
}

st.sidebar.markdown("---")
st.sidebar.subheader("Ti·∫øn ƒê·ªô Quy Tr√¨nh")

for stage, substages in pipeline_stages.items():
    st.sidebar.markdown(f"**{stage}**")
    for substage in substages:
        progress = np.random.randint(70, 100)  # Ti·∫øn ƒë·ªô m√¥ ph·ªèng
        st.sidebar.text(substage)
        st.sidebar.progress(progress/100)

# N·ªôi dung ch√≠nh
st.title("B·∫£ng ƒêi·ªÅu Khi·ªÉn Ph√¢n T√≠ch Ch·ª©ng Kho√°n")

# T·∫£i d·ªØ li·ªáu
market_data = load_market_data()
trading_stats = load_trading_stats(selected_stock)
technical_data = load_technical_data(selected_stock)

# Hi·ªÉn th·ªã d·ªØ li·ªáu th·ªã tr∆∞·ªùng
if market_data is not None:
    stock_data = market_data[market_data['symbol'] == selected_stock].iloc[0]
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="market-data">
            <h3>Gi√° Hi·ªán T·∫°i</h3>
            <p>Gi√°: {}</p>
            <p>Thay ƒë·ªïi: {} ({:.2f}%)</p>
        </div>
        """.format(
            format_price(stock_data['match_price'], stock_data['ref_price']),
            format_price(stock_data['match_price'] - stock_data['ref_price']),
            (stock_data['match_price'] - stock_data['ref_price']) / stock_data['ref_price'] * 100
        ), unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="market-data">
            <h3>Kh·ªëi L∆∞·ª£ng</h3>
            <p>KL Kh·ªõp: {:,.0f}</p>
            <p>KLGD TB (2W): {:,.0f}</p>
        </div>
        """.format(
            stock_data['accumulated_volume'],
            stock_data['avg_match_volume_2w']
        ), unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="market-data">
            <h3>Gi√° Tham Chi·∫øu</h3>
            <p>Tr·∫ßn: {}</p>
            <p>S√†n: {}</p>
        </div>
        """.format(
            format_price(stock_data['ceiling']),
            format_price(stock_data['floor'])
        ), unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="market-data">
            <h3>Room N∆∞·ªõc Ngo√†i</h3>
            <p>C√≤n l·∫°i: {:,.0f}</p>
            <p>T·ª∑ l·ªá s·ªü h·ªØu: {:.2f}%</p>
        </div>
        """.format(
            stock_data['foreign_room'],
            stock_data['current_holding_ratio'] * 100
        ), unsafe_allow_html=True)

# C√°c tab cho t·ª´ng giai ƒëo·∫°n
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üì• Thu Th·∫≠p D·ªØ Li·ªáu", 
    "‚öôÔ∏è X·ª≠ L√Ω D·ªØ Li·ªáu",
    "üìä Ph√¢n T√≠ch D·ªØ Li·ªáu",
    "üìà Ph√¢n T√≠ch T·ªïng H·ª£p",
    "üè¢ Th√¥ng Tin & Tin T·ª©c"
])

# Tab Thu Th·∫≠p D·ªØ Li·ªáu
with tab1:
    st.header("Giai ƒêo·∫°n Thu Th·∫≠p D·ªØ Li·ªáu")
    
    if technical_data is not None:
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì gi√° v√† kh·ªëi l∆∞·ª£ng
        fig = make_subplots(rows=2, cols=1, shared_xaxes=True,
                          vertical_spacing=0.05,
                          row_heights=[0.7, 0.3])

        # Th√™m bi·ªÉu ƒë·ªì n·∫øn
        fig.add_trace(go.Candlestick(x=technical_data['time'],
                                    open=technical_data['Open'],
                                    high=technical_data['High'],
                                    low=technical_data['Low'],
                                    close=technical_data['Close'],
                                    name="OHLC"), row=1, col=1)

        # Th√™m kh·ªëi l∆∞·ª£ng
        fig.add_trace(go.Bar(x=technical_data['time'],
                            y=technical_data['Volume'],
                            name="Kh·ªëi l∆∞·ª£ng"), row=2, col=1)

        fig.update_layout(
            title=f"{selected_stock} - Bi·ªÉu ƒê·ªì Gi√° & Kh·ªëi L∆∞·ª£ng",
            yaxis_title="Gi√°",
            yaxis2_title="Kh·ªëi l∆∞·ª£ng",
            height=600
        )

        st.plotly_chart(fig, use_container_width=True)

# Tab X·ª≠ L√Ω D·ªØ Li·ªáu
with tab2:
    st.header("Giai ƒêo·∫°n X·ª≠ L√Ω D·ªØ Li·ªáu")
    
    if technical_data is not None:
        # T√≠nh to√°n Price_Change tr∆∞·ªõc khi s·ª≠ d·ª•ng
        technical_data['Price_Change'] = technical_data['Close'].pct_change()
        technical_data['Price_Change_Pct'] = technical_data['Price_Change'] * 100

        # Gi·∫£i th√≠ch ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu
        st.markdown("""
        ### üîç Ph∆∞∆°ng Ph√°p X·ª≠ L√Ω D·ªØ Li·ªáu
        
        D·ªØ li·ªáu ƒë∆∞·ª£c x·ª≠ l√Ω qua nhi·ªÅu b∆∞·ªõc ƒë·ªÉ t·∫°o ra c√°c ch·ªâ b√°o k·ªπ thu·∫≠t v√† ph√¢n t√≠ch xu h∆∞·ªõng:
        
        #### 1Ô∏è‚É£ X·ª≠ L√Ω D·ªØ li·ªáu Gi√°
        - **D·ªØ li·ªáu ƒë·∫ßu v√†o**: OHLC (Open, High, Low, Close) v√† Volume
        - **L√†m s·∫°ch d·ªØ li·ªáu**: Lo·∫°i b·ªè c√°c gi√° tr·ªã null v√† b·∫•t th∆∞·ªùng
        - **Chu·∫©n h√≥a**: ƒêi·ªÅu ch·ªânh gi√° theo c√°c s·ª± ki·ªán doanh nghi·ªáp (n·∫øu c√≥)
        
        #### 2Ô∏è‚É£ Ch·ªâ B√°o Xu H∆∞·ªõng
        - **SMA (Simple Moving Average)**:
          - SMA20: Trung b√¨nh ƒë·ªông 20 phi√™n
          - SMA50: Trung b√¨nh ƒë·ªông 50 phi√™n
          - *C√¥ng th·ª©c*: SMA = (P‚ÇÅ + P‚ÇÇ + ... + P‚Çô) / n
        
        - **Bollinger Bands**:
          - D·∫£i gi·ªØa (BB_Mid): SMA 20 phi√™n
          - D·∫£i tr√™n (BB_High): BB_Mid + 2 √ó ƒë·ªô l·ªách chu·∫©n
          - D·∫£i d∆∞·ªõi (BB_Low): BB_Mid - 2 √ó ƒë·ªô l·ªách chu·∫©n
        
        #### 3Ô∏è‚É£ Ch·ªâ B√°o ƒê·ªông L∆∞·ª£ng
        - **RSI (Relative Strength Index)**:
          - Kho·∫£ng th·ªùi gian: 14 phi√™n
          - V√πng qu√° mua: > 70
          - V√πng qu√° b√°n: < 30
          - *C√¥ng th·ª©c*: RSI = 100 - (100 / (1 + RS))
            - RS = Trung b√¨nh tƒÉng / Trung b√¨nh gi·∫£m
        
        - **MACD (Moving Average Convergence Divergence)**:
          - MACD Line: EMA(12) - EMA(26)
          - Signal Line: EMA(9) c·ªßa MACD
          - *Histogram*: MACD - Signal
        
        #### 4Ô∏è‚É£ Ch·ªâ B√°o Bi·∫øn ƒê·ªông
        - **ATR (Average True Range)**:
          - Kho·∫£ng th·ªùi gian: 14 phi√™n
          - *True Range* = max(H-L, |H-C_prev|, |L-C_prev|)
        
        - **OBV (On Balance Volume)**:
          - T√≠ch l≈©y kh·ªëi l∆∞·ª£ng theo chi·ªÅu gi√°
          - TƒÉng khi gi√° ƒë√≥ng c·ª≠a tƒÉng
          - Gi·∫£m khi gi√° ƒë√≥ng c·ª≠a gi·∫£m
        """)

        # Hi·ªÉn th·ªã c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
        st.markdown("### üìä Bi·ªÉu ƒê·ªì Ph√¢n T√≠ch K·ªπ Thu·∫≠t")
        
        # T·∫°o tabs cho c√°c nh√≥m ch·ªâ b√°o
        tech_tab1, tech_tab2, tech_tab3 = st.tabs([
            "Xu H∆∞·ªõng & Bollinger Bands",
            "Ch·ªâ B√°o ƒê·ªông L∆∞·ª£ng",
            "Bi·∫øn ƒê·ªông & Kh·ªëi L∆∞·ª£ng"
        ])
        
        with tech_tab1:
            st.markdown("""
            #### üìà Ph√¢n T√≠ch Xu H∆∞·ªõng v√† Bollinger Bands
            
            - **ƒê∆∞·ªùng MA (Moving Average)**: 
              - MA20 (ng·∫Øn h·∫°n) v√† MA50 (trung h·∫°n) gi√∫p x√°c ƒë·ªãnh xu h∆∞·ªõng
              - C·∫Øt l√™n: T√≠n hi·ªáu tƒÉng gi√°
              - C·∫Øt xu·ªëng: T√≠n hi·ªáu gi·∫£m gi√°
            
            - **D·∫£i Bollinger**:
              - ƒê·ªô r·ªông d·∫£i th·ªÉ hi·ªán bi·∫øn ƒë·ªông
              - Gi√° ch·∫°m d·∫£i tr√™n: C√≥ th·ªÉ qu√° mua
              - Gi√° ch·∫°m d·∫£i d∆∞·ªõi: C√≥ th·ªÉ qu√° b√°n
            """)
            
            fig = make_subplots(rows=2, cols=1, 
                              shared_xaxes=True,
                              vertical_spacing=0.05,
                              row_heights=[0.7, 0.3])

            fig.add_trace(go.Candlestick(x=technical_data['time'],
                                        open=technical_data['Open'],
                                        high=technical_data['High'],
                                        low=technical_data['Low'],
                                        close=technical_data['Close'],
                                        name="Gi√°"), row=1, col=1)
            
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['SMA_20'],
                                   name="SMA20",
                                   line=dict(color='blue', width=1)), row=1, col=1)
            
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['SMA_50'],
                                   name="SMA50",
                                   line=dict(color='orange', width=1)), row=1, col=1)
            
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['BB_High'],
                                   name="BB Upper",
                                   line=dict(color='gray', dash='dash'),
                                   opacity=0.3), row=1, col=1)
            
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['BB_Low'],
                                   name="BB Lower",
                                   line=dict(color='gray', dash='dash'),
                                   fill='tonexty',
                                   opacity=0.3), row=1, col=1)
            
            bb_width = ((technical_data['BB_High'] - technical_data['BB_Low']) / 
                       technical_data['BB_Mid'] * 100)
            
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=bb_width,
                                   name="BB Width (%)",
                                   line=dict(color='purple')), row=2, col=1)
            
            fig.update_layout(height=800, title="Ph√¢n T√≠ch Xu H∆∞·ªõng v√† Bollinger Bands")
            st.plotly_chart(fig, use_container_width=True)

        with tech_tab2:
            st.markdown("""
            #### üìä Ph√¢n T√≠ch ƒê·ªông L∆∞·ª£ng
            
            - **RSI (Relative Strength Index)**:
              - ƒêo l∆∞·ªùng t·ªëc ƒë·ªô v√† ƒë·ªô l·ªõn c·ªßa bi·∫øn ƒë·ªông gi√°
              - RSI > 70: V√πng qu√° mua
              - RSI < 30: V√πng qu√° b√°n
            
            - **MACD**:
              - MACD Line c·∫Øt Signal Line l√™n: T√≠n hi·ªáu mua
              - MACD Line c·∫Øt Signal Line xu·ªëng: T√≠n hi·ªáu b√°n
              - Histogram th·ªÉ hi·ªán ƒë·ªô m·∫°nh c·ªßa xu h∆∞·ªõng
            
            - **Stochastic**:
              - %K v√† %D cho bi·∫øt v·ªã tr√≠ gi√° trong ph·∫°m vi giao d·ªãch
              - V√πng qu√° mua/b√°n t∆∞∆°ng t·ª± RSI
            """)
            
            fig = make_subplots(rows=3, cols=1,
                              shared_xaxes=True,
                              vertical_spacing=0.05,
                              row_heights=[0.4, 0.3, 0.3],
                              subplot_titles=("RSI", "MACD", "Stochastic"))

            # RSI
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['RSI'],
                                   name="RSI",
                                   line=dict(color='blue')), row=1, col=1)
            fig.add_hline(y=70, line_dash="dash", line_color="red", row=1, col=1)
            fig.add_hline(y=30, line_dash="dash", line_color="green", row=1, col=1)

            # MACD
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['MACD'],
                                   name="MACD",
                                   line=dict(color='blue')), row=2, col=1)
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['MACD_Signal'],
                                   name="Signal",
                                   line=dict(color='orange')), row=2, col=1)
            
            # T√≠nh to√°n MACD Histogram
            macd_hist = technical_data['MACD'] - technical_data['MACD_Signal']
            colors = ['green' if x >= 0 else 'red' for x in macd_hist]
            fig.add_trace(go.Bar(x=technical_data['time'],
                               y=macd_hist,
                               name="MACD Hist",
                               marker_color=colors), row=2, col=1)

            # Stochastic
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['Stoch'],
                                   name="%K",
                                   line=dict(color='blue')), row=3, col=1)
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['Stoch_Signal'],
                                   name="%D",
                                   line=dict(color='orange')), row=3, col=1)
            fig.add_hline(y=80, line_dash="dash", line_color="red", row=3, col=1)
            fig.add_hline(y=20, line_dash="dash", line_color="green", row=3, col=1)

            fig.update_layout(height=800, title="Ph√¢n T√≠ch ƒê·ªông L∆∞·ª£ng")
            st.plotly_chart(fig, use_container_width=True)

        with tech_tab3:
            st.markdown("""
            #### üìâ Ph√¢n T√≠ch Bi·∫øn ƒê·ªông v√† Kh·ªëi L∆∞·ª£ng
            
            - **ATR (Average True Range)**:
              - ƒêo l∆∞·ªùng bi·∫øn ƒë·ªông gi√° trung b√¨nh
              - ATR cao: Bi·∫øn ƒë·ªông m·∫°nh
              - ATR th·∫•p: Bi·∫øn ƒë·ªông y·∫øu
            
            - **Kh·ªëi l∆∞·ª£ng**:
              - Kh·ªëi l∆∞·ª£ng tƒÉng khi gi√° tƒÉng: X√°c nh·∫≠n xu h∆∞·ªõng tƒÉng
              - Kh·ªëi l∆∞·ª£ng tƒÉng khi gi√° gi·∫£m: X√°c nh·∫≠n xu h∆∞·ªõng gi·∫£m
              - Kh·ªëi l∆∞·ª£ng th·∫•p: Thi·∫øu s·ª± quan t√¢m c·ªßa th·ªã tr∆∞·ªùng
            
            - **OBV (On Balance Volume)**:
              - T√≠ch l≈©y kh·ªëi l∆∞·ª£ng theo chi·ªÅu gi√°
              - OBV tƒÉng c√πng gi√°: Xu h∆∞·ªõng tƒÉng m·∫°nh
              - OBV gi·∫£m khi gi√° tƒÉng: C·∫£nh b√°o xu h∆∞·ªõng y·∫øu
            """)
            
            fig = make_subplots(rows=3, cols=1,
                              shared_xaxes=True,
                              vertical_spacing=0.05,
                              row_heights=[0.4, 0.3, 0.3],
                              subplot_titles=("ATR", "Kh·ªëi L∆∞·ª£ng", "OBV"))

            # ATR
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['ATR'],
                                   name="ATR",
                                   line=dict(color='blue')), row=1, col=1)

            # S·ª≠ d·ª•ng Price_Change ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n ·ªü tr√™n
            colors = ['green' if x >= 0 else 'red' for x in technical_data['Price_Change']]
            fig.add_trace(go.Bar(x=technical_data['time'],
                               y=technical_data['Volume'],
                               name="Kh·ªëi l∆∞·ª£ng",
                               marker_color=colors), row=2, col=1)

            # OBV
            fig.add_trace(go.Scatter(x=technical_data['time'],
                                   y=technical_data['OBV'],
                                   name="OBV",
                                   line=dict(color='purple')), row=3, col=1)

            fig.update_layout(height=800, title="Ph√¢n T√≠ch Bi·∫øn ƒê·ªông v√† Kh·ªëi L∆∞·ª£ng")
            st.plotly_chart(fig, use_container_width=True)

        # Th√™m ph·∫ßn gi·∫£i th√≠ch t√≠n hi·ªáu giao d·ªãch
        st.markdown("""
        ### üéØ T√≠n Hi·ªáu Giao D·ªãch
        
        D·ª±a tr√™n s·ª± k·∫øt h·ª£p c·ªßa c√°c ch·ªâ b√°o, h·ªá th·ªëng x√°c ƒë·ªãnh c√°c t√≠n hi·ªáu giao d·ªãch sau:
        
        #### T√≠n Hi·ªáu Mua:
        1. RSI < 30 (qu√° b√°n)
        2. Gi√° ch·∫°m/v∆∞·ª£t d·∫£i d∆∞·ªõi Bollinger
        3. MACD c·∫Øt Signal Line t·ª´ d∆∞·ªõi l√™n
        4. Stochastic %K c·∫Øt %D t·ª´ d∆∞·ªõi l√™n trong v√πng qu√° b√°n
        
        #### T√≠n Hi·ªáu B√°n:
        1. RSI > 70 (qu√° mua)
        2. Gi√° ch·∫°m/v∆∞·ª£t d·∫£i tr√™n Bollinger
        3. MACD c·∫Øt Signal Line t·ª´ tr√™n xu·ªëng
        4. Stochastic %K c·∫Øt %D t·ª´ tr√™n xu·ªëng trong v√πng qu√° mua
        
        #### X√°c Nh·∫≠n Xu H∆∞·ªõng:
        - **Xu h∆∞·ªõng tƒÉng** ƒë∆∞·ª£c x√°c nh·∫≠n khi:
          - Gi√° tr√™n MA20 v√† MA50
          - OBV tƒÉng c√πng chi·ªÅu gi√°
          - Kh·ªëi l∆∞·ª£ng tƒÉng trong phi√™n tƒÉng gi√°
        
        - **Xu h∆∞·ªõng gi·∫£m** ƒë∆∞·ª£c x√°c nh·∫≠n khi:
          - Gi√° d∆∞·ªõi MA20 v√† MA50
          - OBV gi·∫£m c√πng chi·ªÅu gi√°
          - Kh·ªëi l∆∞·ª£ng tƒÉng trong phi√™n gi·∫£m gi√°
        """)

# Tab Ph√¢n T√≠ch D·ªØ Li·ªáu
with tab3:
    st.header("Giai ƒêo·∫°n Ph√¢n T√≠ch D·ªØ Li·ªáu")
    
    if technical_data is not None:
        # Ph√¢n t√≠ch xu h∆∞·ªõng
        latest_data = technical_data.iloc[-1]
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë xu h∆∞·ªõng
        technical_data['Price_Change'] = technical_data['Close'].pct_change()
        technical_data['Price_Change_Pct'] = technical_data['Price_Change'] * 100
        
        # T√≠nh RSI v√† c√°c d·∫£i Bollinger
        latest_rsi_signal = 'Qu√° mua' if latest_data['RSI'] > 70 else 'Qu√° b√°n' if latest_data['RSI'] < 30 else 'Trung t√≠nh'
        latest_bb_position = 'Tr√™n d·∫£i tr√™n' if latest_data['Close'] > latest_data['BB_High'] else 'D∆∞·ªõi d·∫£i d∆∞·ªõi' if latest_data['Close'] < latest_data['BB_Low'] else 'Trong d·∫£i'
        
        # Hi·ªÉn th·ªã th√¥ng tin xu h∆∞·ªõng
        col1, col2, col3 = st.columns(3)
        
        with col1:
            trend = "TƒÉng" if latest_data['SMA_20'] > latest_data['SMA_50'] else "Gi·∫£m"
            trend_color = "green" if trend == "TƒÉng" else "red"
            st.markdown(f"""
            <div class="stock-metrics">
                <h3>Xu H∆∞·ªõng Gi√°</h3>
                <p>SMA20: {latest_data['SMA_20']:,.2f}</p>
                <p>SMA50: {latest_data['SMA_50']:,.2f}</p>
                <p>Xu h∆∞·ªõng: <span style="color: {trend_color}; font-weight: bold;">{trend}</span></p>
                <p>Bi·∫øn ƒë·ªông: {latest_data['ATR']:,.2f} ({(latest_data['ATR']/latest_data['Close']*100):,.2f}%)</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            rsi_color = "red" if latest_data['RSI'] > 70 else "green" if latest_data['RSI'] < 30 else "black"
            st.markdown(f"""
            <div class="stock-metrics">
                <h3>Ch·ªâ B√°o ƒê·ªông L∆∞·ª£ng</h3>
                <p>RSI: <span style="color: {rsi_color}; font-weight: bold;">{latest_data['RSI']:.2f}</span></p>
                <p>MACD: {latest_data['MACD']:.2f}</p>
                <p>MACD Signal: {latest_data['MACD_Signal']:.2f}</p>
                <p>Stochastic: {latest_data['Stoch']:.2f}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            bb_color = "red" if latest_bb_position == 'Tr√™n d·∫£i tr√™n' else "green" if latest_bb_position == 'D∆∞·ªõi d·∫£i d∆∞·ªõi' else "black"
            st.markdown(f"""
            <div class="stock-metrics">
                <h3>Ph√¢n T√≠ch Bollinger Bands</h3>
                <p>V·ªã tr√≠: <span style="color: {bb_color}; font-weight: bold;">{latest_bb_position}</span></p>
                <p>BB Width: {(latest_data['BB_High'] - latest_data['BB_Low'])/latest_data['BB_Mid']*100:.2f}%</p>
                <p>Kho·∫£ng c√°ch t·ª´ gi√°: {abs(latest_data['Close'] - latest_data['BB_Mid'])/latest_data['BB_Mid']*100:.2f}%</p>
            </div>
            """, unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng gi√° v√† kh·ªëi l∆∞·ª£ng
        st.subheader("Ph√¢n T√≠ch Xu H∆∞·ªõng Gi√° v√† Kh·ªëi L∆∞·ª£ng")
        
        fig = make_subplots(rows=3, cols=1, 
                           shared_xaxes=True,
                           vertical_spacing=0.05,
                           row_heights=[0.5, 0.25, 0.25],
                           subplot_titles=("Gi√° & Xu H∆∞·ªõng", "Kh·ªëi L∆∞·ª£ng", "Momentum"))

        # Bi·ªÉu ƒë·ªì gi√° v√† MA
        fig.add_trace(go.Candlestick(x=technical_data['time'],
                                    open=technical_data['Open'],
                                    high=technical_data['High'],
                                    low=technical_data['Low'],
                                    close=technical_data['Close'],
                                    name="Gi√°"), row=1, col=1)
        
        fig.add_trace(go.Scatter(x=technical_data['time'], 
                                y=technical_data['SMA_20'],
                                name="SMA20",
                                line=dict(color='blue', width=1)), row=1, col=1)
        
        fig.add_trace(go.Scatter(x=technical_data['time'], 
                                y=technical_data['SMA_50'],
                                name="SMA50",
                                line=dict(color='orange', width=1)), row=1, col=1)
        
        # Th√™m Bollinger Bands
        fig.add_trace(go.Scatter(x=technical_data['time'],
                                y=technical_data['BB_High'],
                                name="BB Upper",
                                line=dict(color='gray', dash='dash'),
                                opacity=0.3), row=1, col=1)
        
        fig.add_trace(go.Scatter(x=technical_data['time'],
                                y=technical_data['BB_Low'],
                                name="BB Lower",
                                line=dict(color='gray', dash='dash'),
                                fill='tonexty',
                                opacity=0.3), row=1, col=1)

        # Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng v·ªõi m√†u s·∫Øc theo xu h∆∞·ªõng
        colors = ['green' if x >= 0 else 'red' for x in technical_data['Price_Change']]
        fig.add_trace(go.Bar(x=technical_data['time'],
                            y=technical_data['Volume'],
                            name="Kh·ªëi l∆∞·ª£ng",
                            marker_color=colors), row=2, col=1)

        # Bi·ªÉu ƒë·ªì Momentum (RSI)
        fig.add_trace(go.Scatter(x=technical_data['time'],
                                y=technical_data['RSI'],
                                name="RSI",
                                line=dict(color='purple')), row=3, col=1)
        
        fig.add_hline(y=70, line_dash="dash", line_color="red", row=3, col=1)
        fig.add_hline(y=30, line_dash="dash", line_color="green", row=3, col=1)

        fig.update_layout(height=800,
                         showlegend=True,
                         title_text=f"Ph√¢n T√≠ch K·ªπ Thu·∫≠t Chi Ti·∫øt - {selected_stock}")
        
        st.plotly_chart(fig, use_container_width=True)

        # Ph√¢n t√≠ch xu h∆∞·ªõng theo th·ªùi gian
        st.subheader("Ph√¢n T√≠ch Xu H∆∞·ªõng Theo Th·ªùi Gian")
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë xu h∆∞·ªõng
        periods = [5, 10, 20, 50]
        trend_data = {}
        
        for period in periods:
            changes = technical_data['Close'].pct_change(period) * 100
            if not changes.empty:
                trend_data[f'Thay ƒë·ªïi {period} phi√™n'] = changes.iloc[-1]
            else:
                trend_data[f'Thay ƒë·ªïi {period} phi√™n'] = 0
            
        # Hi·ªÉn th·ªã ph√¢n t√≠ch xu h∆∞·ªõng
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo th·ªùi gian
            fig = go.Figure()
            
            for period in periods:
                changes = technical_data['Close'].pct_change(period) * 100
                if not changes.empty:
                    fig.add_trace(go.Scatter(x=technical_data['time'],
                                           y=changes,
                                           name=f'Thay ƒë·ªïi {period} phi√™n',
                                           line=dict(width=1)))
            
            fig.update_layout(title=f"Xu H∆∞·ªõng Theo Th·ªùi Gian - {selected_stock}",
                            yaxis_title="Thay ƒë·ªïi (%)",
                            height=400)
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Hi·ªÉn th·ªã b·∫£ng ph√¢n t√≠ch xu h∆∞·ªõng
            trend_summary = pd.DataFrame({
                'Ch·ªâ s·ªë': [
                    'Xu h∆∞·ªõng ng·∫Øn h·∫°n (5 phi√™n)',
                    'Xu h∆∞·ªõng trung h·∫°n (20 phi√™n)',
                    'Xu h∆∞·ªõng d√†i h·∫°n (50 phi√™n)',
                    'ƒê·ªô bi·∫øn ƒë·ªông (ATR)',
                    'Momentum (RSI)',
                    'Xu h∆∞·ªõng MACD'
                ],
                'Tr·∫°ng th√°i': [
                    'TƒÉng' if trend_data['Thay ƒë·ªïi 5 phi√™n'] > 0 else 'Gi·∫£m',
                    'TƒÉng' if trend_data['Thay ƒë·ªïi 20 phi√™n'] > 0 else 'Gi·∫£m',
                    'TƒÉng' if trend_data['Thay ƒë·ªïi 50 phi√™n'] > 0 else 'Gi·∫£m',
                    f"{latest_data['ATR']:.2f} ({(latest_data['ATR']/latest_data['Close']*100):.2f}%)",
                    latest_rsi_signal,
                    'TƒÉng' if latest_data['MACD'] > latest_data['MACD_Signal'] else 'Gi·∫£m'
                ],
                'Gi√° tr·ªã': [
                    f"{trend_data['Thay ƒë·ªïi 5 phi√™n']:.2f}%",
                    f"{trend_data['Thay ƒë·ªïi 20 phi√™n']:.2f}%",
                    f"{trend_data['Thay ƒë·ªïi 50 phi√™n']:.2f}%",
                    f"{latest_data['Close']:.2f}",
                    f"{latest_data['RSI']:.2f}",
                    f"{latest_data['MACD']:.2f}"
                ]
            })
            
            st.dataframe(trend_summary,
                        column_config={
                            "Ch·ªâ s·ªë": st.column_config.TextColumn("Ch·ªâ s·ªë"),
                            "Tr·∫°ng th√°i": st.column_config.TextColumn("Tr·∫°ng th√°i"),
                            "Gi√° tr·ªã": st.column_config.TextColumn("Gi√° tr·ªã")
                        },
                        hide_index=True)

# Tab Ph√¢n T√≠ch T·ªïng H·ª£p
with tab4:
    st.header("Ph√¢n T√≠ch T·ªïng H·ª£p")
    
    if technical_data is not None and trading_stats is not None:
        # Hi·ªÉn th·ªã th·ªëng k√™ giao d·ªãch
        st.subheader("Th·ªëng K√™ Giao D·ªãch")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="stock-metrics">
                <h3>Th·ªëng K√™ Gi√°</h3>
                <p>Cao nh·∫•t 52 tu·∫ßn: {}</p>
                <p>Th·∫•p nh·∫•t 52 tu·∫ßn: {}</p>
                <p>% Thay ƒë·ªïi t·ª´ ƒë√°y: {:.2f}%</p>
            </div>
            """.format(
                format_price(trading_stats.iloc[0]['high_price_1y']),
                format_price(trading_stats.iloc[0]['low_price_1y']),
                trading_stats.iloc[0]['pct_low_change_1y'] * 100
            ), unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="stock-metrics">
                <h3>Th·ªëng K√™ Kh·ªëi Ngo·∫°i</h3>
                <p>Room NN c√≤n l·∫°i: {:,.0f}</p>
                <p>T·ª∑ l·ªá s·ªü h·ªØu: {:.2f}%</p>
                <p>KLGD NN: {:,.0f}</p>
            </div>
            """.format(
                trading_stats.iloc[0]['foreign_room'],
                trading_stats.iloc[0]['current_holding_ratio'] * 100,
                trading_stats.iloc[0]['foreign_volume']
            ), unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n t√≠ch k·ªπ thu·∫≠t t·ªïng h·ª£p
        st.subheader("Ph√¢n T√≠ch K·ªπ Thu·∫≠t T·ªïng H·ª£p")
        
        # T√≠nh to√°n c√°c t√≠n hi·ªáu
        signals = pd.DataFrame(index=technical_data.index)
        signals['Signal'] = 'Gi·ªØ'
        
        # T√≠n hi·ªáu t·ª´ RSI
        signals.loc[technical_data['RSI'] > 70, 'Signal'] = 'B√°n'
        signals.loc[technical_data['RSI'] < 30, 'Signal'] = 'Mua'
        
        # T√≠n hi·ªáu t·ª´ MACD
        signals.loc[(technical_data['MACD'] > technical_data['MACD_Signal']) & 
                   (technical_data['MACD'].shift(1) <= technical_data['MACD_Signal'].shift(1)), 'Signal'] = 'Mua'
        signals.loc[(technical_data['MACD'] < technical_data['MACD_Signal']) & 
                   (technical_data['MACD'].shift(1) >= technical_data['MACD_Signal'].shift(1)), 'Signal'] = 'B√°n'
        
        # V·∫Ω bi·ªÉu ƒë·ªì v·ªõi t√≠n hi·ªáu
        fig = go.Figure()
        
        fig.add_trace(go.Candlestick(x=technical_data['time'],
                                    open=technical_data['Open'],
                                    high=technical_data['High'],
                                    low=technical_data['Low'],
                                    close=technical_data['Close'],
                                    name="OHLC"))
        
        # Th√™m c√°c ƒë∆∞·ªùng MA
        fig.add_trace(go.Scatter(x=technical_data['time'],
                                y=technical_data['SMA_20'],
                                name="SMA20",
                                line=dict(color='blue')))
        
        fig.add_trace(go.Scatter(x=technical_data['time'],
                                y=technical_data['SMA_50'],
                                name="SMA50",
                                line=dict(color='orange')))
        
        # Th√™m t√≠n hi·ªáu mua/b√°n
        buy_signals = signals[signals['Signal'] == 'Mua']
        sell_signals = signals[signals['Signal'] == 'B√°n']
        
        fig.add_trace(go.Scatter(
            x=technical_data.loc[buy_signals.index, 'time'],
            y=technical_data.loc[buy_signals.index, 'Low'] * 0.99,
            mode='markers',
            marker=dict(symbol='triangle-up', size=15, color='green'),
            name='T√≠n hi·ªáu Mua'
        ))
        
        fig.add_trace(go.Scatter(
            x=technical_data.loc[sell_signals.index, 'time'],
            y=technical_data.loc[sell_signals.index, 'High'] * 1.01,
            mode='markers',
            marker=dict(symbol='triangle-down', size=15, color='red'),
            name='T√≠n hi·ªáu B√°n'
        ))
        
        fig.update_layout(
            title=f"{selected_stock} - Ph√¢n T√≠ch K·ªπ Thu·∫≠t T·ªïng H·ª£p",
            yaxis_title="Gi√°",
            height=600
        )
        
        st.plotly_chart(fig, use_container_width=True)

# Tab Th√¥ng Tin & Tin T·ª©c
with tab5:
    st.header("Th√¥ng Tin C√¥ng Ty & Tin T·ª©c")
    
    # ƒê·ªçc d·ªØ li·ªáu c√¥ng ty
    def load_company_data(symbol):
        try:
            data = {}
            
            # ƒê·ªçc th√¥ng tin t·ªïng quan
            overview_path = COLLECTED_DATA_DIR / "company" / f"{symbol}_overview.csv"
            if overview_path.exists():
                data['overview'] = pd.read_csv(overview_path)
            else:
                st.error(f"Kh√¥ng t√¨m th·∫•y file th√¥ng tin t·ªïng quan: {overview_path}")
                return None
            
            # ƒê·ªçc th√¥ng tin c·ªï ƒë√¥ng
            shareholders_path = COLLECTED_DATA_DIR / "company" / f"{symbol}_shareholders.csv"
            if shareholders_path.exists():
                data['shareholders'] = pd.read_csv(shareholders_path)
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y file th√¥ng tin c·ªï ƒë√¥ng: {shareholders_path}")
                data['shareholders'] = pd.DataFrame()
            
            # ƒê·ªçc th√¥ng tin ban l√£nh ƒë·∫°o
            officers_path = COLLECTED_DATA_DIR / "company" / f"{symbol}_officers_working.csv"
            if officers_path.exists():
                data['officers'] = pd.read_csv(officers_path)
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y file th√¥ng tin ban l√£nh ƒë·∫°o: {officers_path}")
                data['officers'] = pd.DataFrame()
            
            return data
            
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu c√¥ng ty: {str(e)}")
            return None

    def load_news_data(symbol):
        try:
            data = {}
            
            # ƒê·ªçc tin t·ª©c
            news_path = COLLECTED_DATA_DIR / "news" / f"{symbol}_news.csv"
            if news_path.exists():
                data['news'] = pd.read_csv(news_path)
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y file tin t·ª©c: {news_path}")
                data['news'] = pd.DataFrame()
            
            # ƒê·ªçc s·ª± ki·ªán
            events_path = COLLECTED_DATA_DIR / "news" / f"{symbol}_events.csv"
            if events_path.exists():
                data['events'] = pd.read_csv(events_path)
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y file s·ª± ki·ªán: {events_path}")
                data['events'] = pd.DataFrame()
            
            return data
            
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu tin t·ª©c: {str(e)}")
            return None

    # Load d·ªØ li·ªáu cho m√£ ƒë∆∞·ª£c ch·ªçn
    company_data = load_company_data(selected_stock)
    news_data = load_news_data(selected_stock)

    if company_data and 'overview' in company_data:
        # Hi·ªÉn th·ªã th√¥ng tin c√¥ng ty
        st.subheader("Th√¥ng Tin T·ªïng Quan")
        overview = company_data['overview'].iloc[0]
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"""
            ### {selected_stock} - {overview['icb_name3']}
            
            **L·ªãch s·ª≠ ph√°t tri·ªÉn:**
            {overview['history']}
            
            **Gi·ªõi thi·ªáu c√¥ng ty:**
            {overview['company_profile']}
            """)
        
        with col2:
            st.markdown(f"""
            ### Th√¥ng Tin C∆° B·∫£n
            - **V·ªën ƒëi·ªÅu l·ªá:** {int(overview['charter_capital']):,} VND
            - **S·ªë l∆∞·ª£ng CP:** {int(overview['issue_share']):,}
            - **Ng√†nh:** {overview['icb_name3']}
            """)

        # Hi·ªÉn th·ªã c∆° c·∫•u c·ªï ƒë√¥ng n·∫øu c√≥
        if 'shareholders' in company_data and not company_data['shareholders'].empty:
            st.subheader("C∆° C·∫•u C·ªï ƒê√¥ng")
            shareholders = company_data['shareholders']
            
            fig = px.pie(shareholders, 
                        values='share_own_percent', 
                        names='share_holder',
                        title=f"C∆° C·∫•u C·ªï ƒê√¥ng {selected_stock}")
            st.plotly_chart(fig, use_container_width=True)

        # Hi·ªÉn th·ªã ban l√£nh ƒë·∫°o n·∫øu c√≥
        if 'officers' in company_data and not company_data['officers'].empty:
            st.subheader("Ban L√£nh ƒê·∫°o")
            officers = company_data['officers']
            st.dataframe(
                officers[['officer_name', 'officer_position', 'quantity']],
                column_config={
                    "officer_name": "H·ªç v√† T√™n",
                    "officer_position": "Ch·ª©c V·ª•",
                    "quantity": "S·ªë L∆∞·ª£ng CP S·ªü H·ªØu"
                },
                hide_index=True
            )

    # Hi·ªÉn th·ªã tin t·ª©c v√† s·ª± ki·ªán
    if news_data:
        st.subheader("Tin T·ª©c & S·ª± Ki·ªán")
        
        # K·∫øt h·ª£p tin t·ª©c v√† s·ª± ki·ªán
        timeline_data = []
        
        if 'news' in news_data and not news_data['news'].empty:
            news = news_data['news']
            for _, row in news.iterrows():
                timeline_data.append({
                    'Ng√†y': pd.to_datetime(row['public_date']),
                    'N·ªôi Dung': row['news_title'],
                    'Lo·∫°i': 'Tin T·ª©c',
                    'Link': row['news_source_link']
                })
        
        if 'events' in news_data and not news_data['events'].empty:
            events = news_data['events']
            for _, row in events.iterrows():
                timeline_data.append({
                    'Ng√†y': pd.to_datetime(row['public_date']),
                    'N·ªôi Dung': row['event_title'],
                    'Lo·∫°i': 'S·ª± Ki·ªán',
                    'Link': row['source_url'] if pd.notna(row['source_url']) else ''
                })
        
        if timeline_data:
            timeline_df = pd.DataFrame(timeline_data)
            timeline_df = timeline_df.sort_values('Ng√†y', ascending=False)
            
            # Hi·ªÉn th·ªã timeline
            for _, row in timeline_df.head(10).iterrows():
                with st.expander(f"{row['Ng√†y'].strftime('%d/%m/%Y')} - {row['N·ªôi Dung']}", expanded=False):
                    st.markdown(f"""
                    **Lo·∫°i:** {row['Lo·∫°i']}
                    
                    **Link:** [{row['N·ªôi Dung']}]({row['Link']})
                    """)
    else:
        st.warning("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu tin t·ª©c. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† d·ªØ li·ªáu.") 